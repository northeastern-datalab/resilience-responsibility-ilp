r(1,1,1).
r(2,1,2).
r(3,1,3).
r(4,1,4).
r(5,2,1).
r(6,2,2).
r(7,2,3).
r(8,2,4).
r(9,3,1).
r(10,3,2).
r(11,3,3).
r(12,3,4).
r(13,4,1).
r(14,4,2).
r(15,4,3).
r(16,4,4).
indb(r, Tid, 1) | indb(r, Tid, 0) :- r(Tid, _, _).
witness(Z, Y, X, T1, T2) :- r(T1, X, Y), r(T2, Y, Z), indb(r, T1, 1), indb(r, T2, 1).

valid_res2(r, 2, 1).
invalid_res2(r, 2, 1).
valid_res3(r, 12, 1).
invalid_res3(r, 12, 1).
valid_res4(r, 2, 1).
invalid_res4(r, 2, 1).
valid_res4(r, 12, 1).
invalid_res4(r, 12, 1).

invalid_res1(r, Tid, 1) | invalid_res1(r, Tid, 0) :- r(Tid, _, _).

invalid_res2(r, Tid, 1) | invalid_res2(r, Tid, 0) :- r(Tid, _, _).

invalid_res3(r, Tid, 1) | invalid_res3(r, Tid, 0) :- r(Tid, _, _).

invalid_res4(r, Tid, 1) | invalid_res4(r, Tid, 0) :- r(Tid, _, _).

valid_res1(r, Tid, 1) | valid_res1(r, Tid, 0) :- r(Tid, _, _).

valid_res2(r, Tid, 1) | valid_res2(r, Tid, 0) :- r(Tid, _, _).

valid_res3(r, Tid, 1) | valid_res3(r, Tid, 0) :- r(Tid, _, _).

valid_res4(r, Tid, 1) | valid_res4(r, Tid, 0) :- r(Tid, _, _).


invalid_resilience1 :- witness(Z, Y, X, T1, T2), invalid_res1(r, T1, 0), invalid_res1(r, T2, 0).
invalid_resilience1 :- #count{Table, Tid: invalid_res1(Table, Tid, 1)} >= K, res(K).
invalid_resilience2 :- witness(Z, Y, X, T1, T2), invalid_res2(r, T1, 0), invalid_res2(r, T2, 0).
invalid_resilience2 :- #count{Table, Tid: invalid_res2(Table, Tid, 1)} >= K, res(K).
invalid_resilience3 :- witness(Z, Y, X, T1, T2), invalid_res3(r, T1, 0), invalid_res3(r, T2, 0).
invalid_resilience3 :- #count{Table, Tid: invalid_res3(Table, Tid, 1)} >= K, res(K).
invalid_resilience4 :- witness(Z, Y, X, T1, T2), invalid_res4(r, T1, 0), invalid_res4(r, T2, 0).
invalid_resilience4 :- #count{Table, Tid: invalid_res4(Table, Tid, 1)} >= K+1, res(K).

:- witness(Z, Y, X, T1, T2), valid_res1(r, T1, 0), valid_res1(r, T2, 0).
res(K) :- #count{Table, Tid: valid_res1(Table, Tid, 1)} = K.
:- witness(Z, Y, X, T1, T2), valid_res2(r, T1, 0), valid_res2(r, T2, 0).
:- not #count{Table, Tid: valid_res2(Table, Tid, 1)} = K, res(K).
:- witness(Z, Y, X, T1, T2), valid_res3(r, T1, 0), valid_res3(r, T2, 0).
:- not #count{Table, Tid: valid_res3(Table, Tid, 1)} = K, res(K).
:- witness(Z, Y, X, T1, T2), valid_res4(r, T1, 0), valid_res4(r, T2, 0).
:- not #count{Table, Tid: valid_res4(Table, Tid, 1)} = K+1, res(K).

invalid_res1(r, Tid, 0) :- invalid_resilience1, r(Tid, _, _).
invalid_res1(r, Tid, 1) :- invalid_resilience1, r(Tid, _, _).

invalid_res2(r, Tid, 0) :- invalid_resilience2, r(Tid, _, _).
invalid_res2(r, Tid, 1) :- invalid_resilience2, r(Tid, _, _).

invalid_res3(r, Tid, 0) :- invalid_resilience3, r(Tid, _, _).
invalid_res3(r, Tid, 1) :- invalid_resilience3, r(Tid, _, _).

invalid_res4(r, Tid, 0) :- invalid_resilience4, r(Tid, _, _).
invalid_res4(r, Tid, 1) :- invalid_resilience4, r(Tid, _, _).

:- not invalid_resilience1.
:- not invalid_resilience2.
:- not invalid_resilience3.
:- not invalid_resilience4.
range_triangle(1..3).range_domain(1..4).
endpoint1_constant(1).
endpoint1_constant(2).
endpoint2_constant(3).
endpoint2_constant(4).
:- witness(Z, Y, X, T1, T2), endpoint1_constant(Z), endpoint1_constant(Y), endpoint1_constant(X).
:- witness(Z, Y, X, T1, T2), endpoint2_constant(Z), endpoint2_constant(Y), endpoint2_constant(X).
:- not #count{ T1, T2: witness(Z, 2, 1, T1, T2)} = 1.
:- not #count{ T1, T2: witness(2, 1, X, T1, T2)} = 1.
:- not #count{ T1, T2: witness(Z, 4, 3, T1, T2)} = 1.
:- not #count{ T1, T2: witness(4, 3, X, T1, T2)} = 1.

isomorph_map(C, 1, C) :-  endpoint1_constant(C), range_triangle(I). % endpoint1 gets mapped to itself for edge 1
isomorph_map(C, 2, X) :-  endpoint1_constant(C), range_triangle(I), X = C + 2. %endpoint1 gets mapped to 2 for edge 2 - add endpoint arity
isomorph_map(C, 3, C) :-  endpoint1_constant(C), range_triangle(I). %endpoint1 gets mapped to itself for edge 3
isomorph_map(C, 1, C) :-  endpoint2_constant(C), range_triangle(I). %endpoint2 gets mapped to itself for edge 1
isomorph_map(C, 2, X) :-  endpoint2_constant(C), range_triangle(I), X = C + 2. %endpoint2 gets mapped to 3 for edge 2
isomorph_map(C, 3, X) :-  endpoint2_constant(C), range_triangle(I), X = C + 2. %endpoint2 gets mapped to 3 for edge 3
isomorph_map(C, I, X) :- range_triangle(I), range_domain(C), X = C+(4+1)*I, not endpoint1_constant(C), not endpoint2_constant(C).

ijp_isomorph_1_r(TID, VI0,VI1) :- indb(r, TID, 1), r(TID, V0,V1), isomorph_map(V0,1,VI0), isomorph_map(V1,1,VI1).
ijp_isomorph_2_r(TID, VI0,VI1) :- indb(r, TID, 1), r(TID, V0,V1), isomorph_map(V0,2,VI0), isomorph_map(V1,2,VI1).
ijp_isomorph_3_r(TID, VI0,VI1) :- indb(r, TID, 1), r(TID, V0,V1), isomorph_map(V0,3,VI0), isomorph_map(V1,3,VI1).

ijp_isomorph_triangle_r(TID, V0, V1) :- ijp_isomorph_1_r(TID, V0, V1).
ijp_isomorph_triangle_r(TID, V0, V1) :- ijp_isomorph_2_r(TID, V0, V1).
ijp_isomorph_triangle_r(TID, V0, V1) :- ijp_isomorph_3_r(TID, V0, V1).
ijp_triangle_witness(Z, Y, X) :- ijp_isomorph_triangle_r(T1, X, Y), ijp_isomorph_triangle_r(T2, Y, Z).
number_of_witnesses(K) :- #count{ Z, Y, X, T1, T2 : witness(Z, Y, X, T1, T2) } = K.
:- number_of_witnesses(K), not  #count{ Z, Y, X : ijp_triangle_witness(Z, Y, X) }= 3*K.
:~ witness(Z, Y, X, T1, T2). [1@1, Z, Y, X]

#show.
#show number_of_witnesses(K) : number_of_witnesses(K).
#show witness(Z, Y, X) : witness(Z, Y, X, T1, T2).
#show res(K) : res(K).
