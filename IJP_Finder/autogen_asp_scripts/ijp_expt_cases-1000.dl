s(1,1).
s(2,2).
s(3,3).
t(1,1).
t(2,2).
t(3,3).
w(1,1,1,1).
w(2,1,1,2).
w(3,1,1,3).
w(4,1,2,1).
w(5,1,2,2).
w(6,1,2,3).
w(7,1,3,1).
w(8,1,3,2).
w(9,1,3,3).
w(10,2,1,1).
w(11,2,1,2).
w(12,2,1,3).
w(13,2,2,1).
w(14,2,2,2).
w(15,2,2,3).
w(16,2,3,1).
w(17,2,3,2).
w(18,2,3,3).
w(19,3,1,1).
w(20,3,1,2).
w(21,3,1,3).
w(22,3,2,1).
w(23,3,2,2).
w(24,3,2,3).
w(25,3,3,1).
w(26,3,3,2).
w(27,3,3,3).
r(1,1).
r(2,2).
r(3,3).
indb(s, Tid, 1) | indb(s, Tid, 0) :- s(Tid, _).
indb(t, Tid, 1) | indb(t, Tid, 0) :- t(Tid, _).
indb(w, Tid, 1) | indb(w, Tid, 0) :- w(Tid, _, _, _).
indb(r, Tid, 1) | indb(r, Tid, 0) :- r(Tid, _).
witness(X, Z, Y, T1, T2, T3, T4) :- r(T1, X), s(T2, Y), t(T3, Z), w(T4, X, Y, Z), indb(r, T1, 1), indb(s, T2, 1), indb(t, T3, 1), indb(w, T4, 1).

valid_res2(r, 1, 1).
invalid_res2(r, 1, 1).
valid_res3(r, 2, 1).
invalid_res3(r, 2, 1).
valid_res4(r, 1, 1).
invalid_res4(r, 1, 1).
valid_res4(r, 2, 1).
invalid_res4(r, 2, 1).

invalid_res1(s, Tid, 1) | invalid_res1(s, Tid, 0) :- s(Tid, _).
invalid_res1(t, Tid, 1) | invalid_res1(t, Tid, 0) :- t(Tid, _).
invalid_res1(w, Tid, 1) | invalid_res1(w, Tid, 0) :- w(Tid, _, _, _).
invalid_res1(r, Tid, 1) | invalid_res1(r, Tid, 0) :- r(Tid, _).

invalid_res2(s, Tid, 1) | invalid_res2(s, Tid, 0) :- s(Tid, _).
invalid_res2(t, Tid, 1) | invalid_res2(t, Tid, 0) :- t(Tid, _).
invalid_res2(w, Tid, 1) | invalid_res2(w, Tid, 0) :- w(Tid, _, _, _).
invalid_res2(r, Tid, 1) | invalid_res2(r, Tid, 0) :- r(Tid, _).

invalid_res3(s, Tid, 1) | invalid_res3(s, Tid, 0) :- s(Tid, _).
invalid_res3(t, Tid, 1) | invalid_res3(t, Tid, 0) :- t(Tid, _).
invalid_res3(w, Tid, 1) | invalid_res3(w, Tid, 0) :- w(Tid, _, _, _).
invalid_res3(r, Tid, 1) | invalid_res3(r, Tid, 0) :- r(Tid, _).

invalid_res4(s, Tid, 1) | invalid_res4(s, Tid, 0) :- s(Tid, _).
invalid_res4(t, Tid, 1) | invalid_res4(t, Tid, 0) :- t(Tid, _).
invalid_res4(w, Tid, 1) | invalid_res4(w, Tid, 0) :- w(Tid, _, _, _).
invalid_res4(r, Tid, 1) | invalid_res4(r, Tid, 0) :- r(Tid, _).

valid_res1(s, Tid, 1) | valid_res1(s, Tid, 0) :- s(Tid, _).
valid_res1(t, Tid, 1) | valid_res1(t, Tid, 0) :- t(Tid, _).
valid_res1(w, Tid, 1) | valid_res1(w, Tid, 0) :- w(Tid, _, _, _).
valid_res1(r, Tid, 1) | valid_res1(r, Tid, 0) :- r(Tid, _).

valid_res2(s, Tid, 1) | valid_res2(s, Tid, 0) :- s(Tid, _).
valid_res2(t, Tid, 1) | valid_res2(t, Tid, 0) :- t(Tid, _).
valid_res2(w, Tid, 1) | valid_res2(w, Tid, 0) :- w(Tid, _, _, _).
valid_res2(r, Tid, 1) | valid_res2(r, Tid, 0) :- r(Tid, _).

valid_res3(s, Tid, 1) | valid_res3(s, Tid, 0) :- s(Tid, _).
valid_res3(t, Tid, 1) | valid_res3(t, Tid, 0) :- t(Tid, _).
valid_res3(w, Tid, 1) | valid_res3(w, Tid, 0) :- w(Tid, _, _, _).
valid_res3(r, Tid, 1) | valid_res3(r, Tid, 0) :- r(Tid, _).

valid_res4(s, Tid, 1) | valid_res4(s, Tid, 0) :- s(Tid, _).
valid_res4(t, Tid, 1) | valid_res4(t, Tid, 0) :- t(Tid, _).
valid_res4(w, Tid, 1) | valid_res4(w, Tid, 0) :- w(Tid, _, _, _).
valid_res4(r, Tid, 1) | valid_res4(r, Tid, 0) :- r(Tid, _).


invalid_resilience1 :- witness(X, Z, Y, T1, T2, T3, T4), invalid_res1(r, T1, 0), invalid_res1(s, T2, 0), invalid_res1(t, T3, 0), invalid_res1(w, T4, 0).
invalid_resilience1 :- #count{Table, Tid: invalid_res1(Table, Tid, 1)} >= K, res(K).
invalid_resilience2 :- witness(X, Z, Y, T1, T2, T3, T4), invalid_res2(r, T1, 0), invalid_res2(s, T2, 0), invalid_res2(t, T3, 0), invalid_res2(w, T4, 0).
invalid_resilience2 :- #count{Table, Tid: invalid_res2(Table, Tid, 1)} >= K, res(K).
invalid_resilience3 :- witness(X, Z, Y, T1, T2, T3, T4), invalid_res3(r, T1, 0), invalid_res3(s, T2, 0), invalid_res3(t, T3, 0), invalid_res3(w, T4, 0).
invalid_resilience3 :- #count{Table, Tid: invalid_res3(Table, Tid, 1)} >= K, res(K).
invalid_resilience4 :- witness(X, Z, Y, T1, T2, T3, T4), invalid_res4(r, T1, 0), invalid_res4(s, T2, 0), invalid_res4(t, T3, 0), invalid_res4(w, T4, 0).
invalid_resilience4 :- #count{Table, Tid: invalid_res4(Table, Tid, 1)} >= K+1, res(K).

:- witness(X, Z, Y, T1, T2, T3, T4), valid_res1(r, T1, 0), valid_res1(s, T2, 0), valid_res1(t, T3, 0), valid_res1(w, T4, 0).
res(K) :- #count{Table, Tid: valid_res1(Table, Tid, 1)} = K.
:- witness(X, Z, Y, T1, T2, T3, T4), valid_res2(r, T1, 0), valid_res2(s, T2, 0), valid_res2(t, T3, 0), valid_res2(w, T4, 0).
:- not #count{Table, Tid: valid_res2(Table, Tid, 1)} = K, res(K).
:- witness(X, Z, Y, T1, T2, T3, T4), valid_res3(r, T1, 0), valid_res3(s, T2, 0), valid_res3(t, T3, 0), valid_res3(w, T4, 0).
:- not #count{Table, Tid: valid_res3(Table, Tid, 1)} = K, res(K).
:- witness(X, Z, Y, T1, T2, T3, T4), valid_res4(r, T1, 0), valid_res4(s, T2, 0), valid_res4(t, T3, 0), valid_res4(w, T4, 0).
:- not #count{Table, Tid: valid_res4(Table, Tid, 1)} = K+1, res(K).

invalid_res1(s, Tid, 0) :- invalid_resilience1, s(Tid, _).
invalid_res1(s, Tid, 1) :- invalid_resilience1, s(Tid, _).
invalid_res1(t, Tid, 0) :- invalid_resilience1, t(Tid, _).
invalid_res1(t, Tid, 1) :- invalid_resilience1, t(Tid, _).
invalid_res1(w, Tid, 0) :- invalid_resilience1, w(Tid, _, _, _).
invalid_res1(w, Tid, 1) :- invalid_resilience1, w(Tid, _, _, _).
invalid_res1(r, Tid, 0) :- invalid_resilience1, r(Tid, _).
invalid_res1(r, Tid, 1) :- invalid_resilience1, r(Tid, _).

invalid_res2(s, Tid, 0) :- invalid_resilience2, s(Tid, _).
invalid_res2(s, Tid, 1) :- invalid_resilience2, s(Tid, _).
invalid_res2(t, Tid, 0) :- invalid_resilience2, t(Tid, _).
invalid_res2(t, Tid, 1) :- invalid_resilience2, t(Tid, _).
invalid_res2(w, Tid, 0) :- invalid_resilience2, w(Tid, _, _, _).
invalid_res2(w, Tid, 1) :- invalid_resilience2, w(Tid, _, _, _).
invalid_res2(r, Tid, 0) :- invalid_resilience2, r(Tid, _).
invalid_res2(r, Tid, 1) :- invalid_resilience2, r(Tid, _).

invalid_res3(s, Tid, 0) :- invalid_resilience3, s(Tid, _).
invalid_res3(s, Tid, 1) :- invalid_resilience3, s(Tid, _).
invalid_res3(t, Tid, 0) :- invalid_resilience3, t(Tid, _).
invalid_res3(t, Tid, 1) :- invalid_resilience3, t(Tid, _).
invalid_res3(w, Tid, 0) :- invalid_resilience3, w(Tid, _, _, _).
invalid_res3(w, Tid, 1) :- invalid_resilience3, w(Tid, _, _, _).
invalid_res3(r, Tid, 0) :- invalid_resilience3, r(Tid, _).
invalid_res3(r, Tid, 1) :- invalid_resilience3, r(Tid, _).

invalid_res4(s, Tid, 0) :- invalid_resilience4, s(Tid, _).
invalid_res4(s, Tid, 1) :- invalid_resilience4, s(Tid, _).
invalid_res4(t, Tid, 0) :- invalid_resilience4, t(Tid, _).
invalid_res4(t, Tid, 1) :- invalid_resilience4, t(Tid, _).
invalid_res4(w, Tid, 0) :- invalid_resilience4, w(Tid, _, _, _).
invalid_res4(w, Tid, 1) :- invalid_resilience4, w(Tid, _, _, _).
invalid_res4(r, Tid, 0) :- invalid_resilience4, r(Tid, _).
invalid_res4(r, Tid, 1) :- invalid_resilience4, r(Tid, _).

:- not invalid_resilience1.
:- not invalid_resilience2.
:- not invalid_resilience3.
:- not invalid_resilience4.
range_triangle(1..3).range_domain(1..3).
endpoint1_constant(1).
endpoint2_constant(2).
:- witness(X, Z, Y, T1, T2, T3, T4), endpoint1_constant(X), endpoint1_constant(Z), endpoint1_constant(Y).
:- witness(X, Z, Y, T1, T2, T3, T4), endpoint2_constant(X), endpoint2_constant(Z), endpoint2_constant(Y).
:- not #count{ T1, T2, T3, T4: witness(1, Z, Y, T1, T2, T3, T4)} = 1.
:- not #count{ T1, T2, T3, T4: witness(2, Z, Y, T1, T2, T3, T4)} = 1.

isomorph_map(C, 1, C) :-  endpoint1_constant(C), range_triangle(I). % endpoint1 gets mapped to itself for edge 1
isomorph_map(C, 2, X) :-  endpoint1_constant(C), range_triangle(I), X = C + 1. %endpoint1 gets mapped to 2 for edge 2 - add endpoint arity
isomorph_map(C, 3, C) :-  endpoint1_constant(C), range_triangle(I). %endpoint1 gets mapped to itself for edge 3
isomorph_map(C, 1, C) :-  endpoint2_constant(C), range_triangle(I). %endpoint2 gets mapped to itself for edge 1
isomorph_map(C, 2, X) :-  endpoint2_constant(C), range_triangle(I), X = C + 1. %endpoint2 gets mapped to 3 for edge 2
isomorph_map(C, 3, X) :-  endpoint2_constant(C), range_triangle(I), X = C + 1. %endpoint2 gets mapped to 3 for edge 3
isomorph_map(C, I, X) :- range_triangle(I), range_domain(C), X = C+(3+1)*I, not endpoint1_constant(C), not endpoint2_constant(C).

ijp_isomorph_1_s(TID, VI0) :- indb(s, TID, 1), s(TID, V0), isomorph_map(V0,1,VI0).
ijp_isomorph_1_t(TID, VI0) :- indb(t, TID, 1), t(TID, V0), isomorph_map(V0,1,VI0).
ijp_isomorph_1_w(TID, VI0,VI1,VI2) :- indb(w, TID, 1), w(TID, V0,V1,V2), isomorph_map(V0,1,VI0), isomorph_map(V1,1,VI1), isomorph_map(V2,1,VI2).
ijp_isomorph_1_r(TID, VI0) :- indb(r, TID, 1), r(TID, V0), isomorph_map(V0,1,VI0).
ijp_isomorph_2_s(TID, VI0) :- indb(s, TID, 1), s(TID, V0), isomorph_map(V0,2,VI0).
ijp_isomorph_2_t(TID, VI0) :- indb(t, TID, 1), t(TID, V0), isomorph_map(V0,2,VI0).
ijp_isomorph_2_w(TID, VI0,VI1,VI2) :- indb(w, TID, 1), w(TID, V0,V1,V2), isomorph_map(V0,2,VI0), isomorph_map(V1,2,VI1), isomorph_map(V2,2,VI2).
ijp_isomorph_2_r(TID, VI0) :- indb(r, TID, 1), r(TID, V0), isomorph_map(V0,2,VI0).
ijp_isomorph_3_s(TID, VI0) :- indb(s, TID, 1), s(TID, V0), isomorph_map(V0,3,VI0).
ijp_isomorph_3_t(TID, VI0) :- indb(t, TID, 1), t(TID, V0), isomorph_map(V0,3,VI0).
ijp_isomorph_3_w(TID, VI0,VI1,VI2) :- indb(w, TID, 1), w(TID, V0,V1,V2), isomorph_map(V0,3,VI0), isomorph_map(V1,3,VI1), isomorph_map(V2,3,VI2).
ijp_isomorph_3_r(TID, VI0) :- indb(r, TID, 1), r(TID, V0), isomorph_map(V0,3,VI0).

ijp_isomorph_triangle_s(TID, V0) :- ijp_isomorph_1_s(TID, V0).
ijp_isomorph_triangle_t(TID, V0) :- ijp_isomorph_1_t(TID, V0).
ijp_isomorph_triangle_w(TID, V0, V1, V2) :- ijp_isomorph_1_w(TID, V0, V1, V2).
ijp_isomorph_triangle_r(TID, V0) :- ijp_isomorph_1_r(TID, V0).
ijp_isomorph_triangle_s(TID, V0) :- ijp_isomorph_2_s(TID, V0).
ijp_isomorph_triangle_t(TID, V0) :- ijp_isomorph_2_t(TID, V0).
ijp_isomorph_triangle_w(TID, V0, V1, V2) :- ijp_isomorph_2_w(TID, V0, V1, V2).
ijp_isomorph_triangle_r(TID, V0) :- ijp_isomorph_2_r(TID, V0).
ijp_isomorph_triangle_s(TID, V0) :- ijp_isomorph_3_s(TID, V0).
ijp_isomorph_triangle_t(TID, V0) :- ijp_isomorph_3_t(TID, V0).
ijp_isomorph_triangle_w(TID, V0, V1, V2) :- ijp_isomorph_3_w(TID, V0, V1, V2).
ijp_isomorph_triangle_r(TID, V0) :- ijp_isomorph_3_r(TID, V0).
ijp_triangle_witness(X, Z, Y) :- ijp_isomorph_triangle_r(T1, X), ijp_isomorph_triangle_s(T2, Y), ijp_isomorph_triangle_t(T3, Z), ijp_isomorph_triangle_w(T4, X, Y, Z).
number_of_witnesses(K) :- #count{ X, Z, Y, T1, T2, T3, T4 : witness(X, Z, Y, T1, T2, T3, T4) } = K.
:- number_of_witnesses(K), not  #count{ X, Z, Y : ijp_triangle_witness(X, Z, Y) }= 3*K.
:~ witness(X, Z, Y, T1, T2, T3, T4). [1@1, X, Z, Y]

#show.
#show number_of_witnesses(K) : number_of_witnesses(K).
#show witness(X, Z, Y) : witness(X, Z, Y, T1, T2, T3, T4).
#show res(K) : res(K).
