a(1,1).
a(2,2).
a(3,3).
a(4,4).
a(5,5).
a(6,6).
a(7,7).
r(1,1,1).
r(2,1,2).
r(3,1,3).
r(4,1,4).
r(5,1,5).
r(6,1,6).
r(7,1,7).
r(8,2,1).
r(9,2,2).
r(10,2,3).
r(11,2,4).
r(12,2,5).
r(13,2,6).
r(14,2,7).
r(15,3,1).
r(16,3,2).
r(17,3,3).
r(18,3,4).
r(19,3,5).
r(20,3,6).
r(21,3,7).
r(22,4,1).
r(23,4,2).
r(24,4,3).
r(25,4,4).
r(26,4,5).
r(27,4,6).
r(28,4,7).
r(29,5,1).
r(30,5,2).
r(31,5,3).
r(32,5,4).
r(33,5,5).
r(34,5,6).
r(35,5,7).
r(36,6,1).
r(37,6,2).
r(38,6,3).
r(39,6,4).
r(40,6,5).
r(41,6,6).
r(42,6,7).
r(43,7,1).
r(44,7,2).
r(45,7,3).
r(46,7,4).
r(47,7,5).
r(48,7,6).
r(49,7,7).
c(1,1).
c(2,2).
c(3,3).
c(4,4).
c(5,5).
c(6,6).
c(7,7).
indb(a, Tid, 1) | indb(a, Tid, 0) :- a(Tid, _).
indb(r, Tid, 1) | indb(r, Tid, 0) :- r(Tid, _, _).
indb(c, Tid, 1) | indb(c, Tid, 0) :- c(Tid, _).
witness(Z, X, Y, T1, T2, T3, T4, T5) :- a(T1, X), r(T2, X, Y), r(T3, Y, Y), r(T4, Y, Z), c(T5, Z), indb(a, T1, 1), indb(r, T2, 1), indb(r, T3, 1), indb(r, T4, 1), indb(c, T5, 1).
number_of_witnesses(K) :- #count{ Z, X, Y, T1, T2, T3, T4, T5 : witness(Z, X, Y, T1, T2, T3, T4, T5) } = K.

valid_res2(a, 1, 1).
invalid_res2(a, 1, 1).
valid_res3(a, 2, 1).
invalid_res3(a, 2, 1).
valid_res4(a, 1, 1).
invalid_res4(a, 1, 1).
valid_res4(a, 2, 1).
invalid_res4(a, 2, 1).

invalid_res1(a, Tid, 1) | invalid_res1(a, Tid, 0) :- a(Tid, _).
invalid_res1(r, Tid, 1) | invalid_res1(r, Tid, 0) :- r(Tid, _, _).
invalid_res1(c, Tid, 1) | invalid_res1(c, Tid, 0) :- c(Tid, _).

invalid_res2(a, Tid, 1) | invalid_res2(a, Tid, 0) :- a(Tid, _).
invalid_res2(r, Tid, 1) | invalid_res2(r, Tid, 0) :- r(Tid, _, _).
invalid_res2(c, Tid, 1) | invalid_res2(c, Tid, 0) :- c(Tid, _).

invalid_res3(a, Tid, 1) | invalid_res3(a, Tid, 0) :- a(Tid, _).
invalid_res3(r, Tid, 1) | invalid_res3(r, Tid, 0) :- r(Tid, _, _).
invalid_res3(c, Tid, 1) | invalid_res3(c, Tid, 0) :- c(Tid, _).

invalid_res4(a, Tid, 1) | invalid_res4(a, Tid, 0) :- a(Tid, _).
invalid_res4(r, Tid, 1) | invalid_res4(r, Tid, 0) :- r(Tid, _, _).
invalid_res4(c, Tid, 1) | invalid_res4(c, Tid, 0) :- c(Tid, _).

valid_res1(a, Tid, 1) | valid_res1(a, Tid, 0) :- a(Tid, _).
valid_res1(r, Tid, 1) | valid_res1(r, Tid, 0) :- r(Tid, _, _).
valid_res1(c, Tid, 1) | valid_res1(c, Tid, 0) :- c(Tid, _).

valid_res2(a, Tid, 1) | valid_res2(a, Tid, 0) :- a(Tid, _).
valid_res2(r, Tid, 1) | valid_res2(r, Tid, 0) :- r(Tid, _, _).
valid_res2(c, Tid, 1) | valid_res2(c, Tid, 0) :- c(Tid, _).

valid_res3(a, Tid, 1) | valid_res3(a, Tid, 0) :- a(Tid, _).
valid_res3(r, Tid, 1) | valid_res3(r, Tid, 0) :- r(Tid, _, _).
valid_res3(c, Tid, 1) | valid_res3(c, Tid, 0) :- c(Tid, _).

valid_res4(a, Tid, 1) | valid_res4(a, Tid, 0) :- a(Tid, _).
valid_res4(r, Tid, 1) | valid_res4(r, Tid, 0) :- r(Tid, _, _).
valid_res4(c, Tid, 1) | valid_res4(c, Tid, 0) :- c(Tid, _).


invalid_resilience1 :- witness(Z, X, Y, T1, T2, T3, T4, T5), invalid_res1(a, T1, 0), invalid_res1(r, T2, 0), invalid_res1(r, T3, 0), invalid_res1(r, T4, 0), invalid_res1(c, T5, 0).
invalid_resilience1 :- #count{Table, Tid: invalid_res1(Table, Tid, 1)} >= K, res(K).
invalid_resilience2 :- witness(Z, X, Y, T1, T2, T3, T4, T5), invalid_res2(a, T1, 0), invalid_res2(r, T2, 0), invalid_res2(r, T3, 0), invalid_res2(r, T4, 0), invalid_res2(c, T5, 0).
invalid_resilience2 :- #count{Table, Tid: invalid_res2(Table, Tid, 1)} >= K, res(K).
invalid_resilience3 :- witness(Z, X, Y, T1, T2, T3, T4, T5), invalid_res3(a, T1, 0), invalid_res3(r, T2, 0), invalid_res3(r, T3, 0), invalid_res3(r, T4, 0), invalid_res3(c, T5, 0).
invalid_resilience3 :- #count{Table, Tid: invalid_res3(Table, Tid, 1)} >= K, res(K).
invalid_resilience4 :- witness(Z, X, Y, T1, T2, T3, T4, T5), invalid_res4(a, T1, 0), invalid_res4(r, T2, 0), invalid_res4(r, T3, 0), invalid_res4(r, T4, 0), invalid_res4(c, T5, 0).
invalid_resilience4 :- #count{Table, Tid: invalid_res4(Table, Tid, 1)} >= K+1, res(K).

:- witness(Z, X, Y, T1, T2, T3, T4, T5), valid_res1(a, T1, 0), valid_res1(r, T2, 0), valid_res1(r, T3, 0), valid_res1(r, T4, 0), valid_res1(c, T5, 0).
res(K) :- #count{Table, Tid: valid_res1(Table, Tid, 1)} = K.
:- witness(Z, X, Y, T1, T2, T3, T4, T5), valid_res2(a, T1, 0), valid_res2(r, T2, 0), valid_res2(r, T3, 0), valid_res2(r, T4, 0), valid_res2(c, T5, 0).
:- not #count{Table, Tid: valid_res2(Table, Tid, 1)} = K, res(K).
:- witness(Z, X, Y, T1, T2, T3, T4, T5), valid_res3(a, T1, 0), valid_res3(r, T2, 0), valid_res3(r, T3, 0), valid_res3(r, T4, 0), valid_res3(c, T5, 0).
:- not #count{Table, Tid: valid_res3(Table, Tid, 1)} = K, res(K).
:- witness(Z, X, Y, T1, T2, T3, T4, T5), valid_res4(a, T1, 0), valid_res4(r, T2, 0), valid_res4(r, T3, 0), valid_res4(r, T4, 0), valid_res4(c, T5, 0).
:- not #count{Table, Tid: valid_res4(Table, Tid, 1)} = K+1, res(K).

invalid_res1(a, Tid, 0) :- invalid_resilience1, a(Tid, _).
invalid_res1(a, Tid, 1) :- invalid_resilience1, a(Tid, _).
invalid_res1(r, Tid, 0) :- invalid_resilience1, r(Tid, _, _).
invalid_res1(r, Tid, 1) :- invalid_resilience1, r(Tid, _, _).
invalid_res1(c, Tid, 0) :- invalid_resilience1, c(Tid, _).
invalid_res1(c, Tid, 1) :- invalid_resilience1, c(Tid, _).

invalid_res2(a, Tid, 0) :- invalid_resilience2, a(Tid, _).
invalid_res2(a, Tid, 1) :- invalid_resilience2, a(Tid, _).
invalid_res2(r, Tid, 0) :- invalid_resilience2, r(Tid, _, _).
invalid_res2(r, Tid, 1) :- invalid_resilience2, r(Tid, _, _).
invalid_res2(c, Tid, 0) :- invalid_resilience2, c(Tid, _).
invalid_res2(c, Tid, 1) :- invalid_resilience2, c(Tid, _).

invalid_res3(a, Tid, 0) :- invalid_resilience3, a(Tid, _).
invalid_res3(a, Tid, 1) :- invalid_resilience3, a(Tid, _).
invalid_res3(r, Tid, 0) :- invalid_resilience3, r(Tid, _, _).
invalid_res3(r, Tid, 1) :- invalid_resilience3, r(Tid, _, _).
invalid_res3(c, Tid, 0) :- invalid_resilience3, c(Tid, _).
invalid_res3(c, Tid, 1) :- invalid_resilience3, c(Tid, _).

invalid_res4(a, Tid, 0) :- invalid_resilience4, a(Tid, _).
invalid_res4(a, Tid, 1) :- invalid_resilience4, a(Tid, _).
invalid_res4(r, Tid, 0) :- invalid_resilience4, r(Tid, _, _).
invalid_res4(r, Tid, 1) :- invalid_resilience4, r(Tid, _, _).
invalid_res4(c, Tid, 0) :- invalid_resilience4, c(Tid, _).
invalid_res4(c, Tid, 1) :- invalid_resilience4, c(Tid, _).

:- not invalid_resilience1.
:- not invalid_resilience2.
:- not invalid_resilience3.
:- not invalid_resilience4.
range_triangle(1..3).range_domain(1..7).
endpoint1_constant(1).
endpoint2_constant(2).
:- witness(Z, X, Y, T1, T2, T3, T4, T5), endpoint1_constant(Z), endpoint1_constant(X), endpoint1_constant(Y).
:- witness(Z, X, Y, T1, T2, T3, T4, T5), endpoint2_constant(Z), endpoint2_constant(X), endpoint2_constant(Y).

isomorph_map(C, 1, C) :-  endpoint1_constant(C), range_triangle(I). % endpoint1 gets mapped to itself for edge 1
isomorph_map(C, 2, X) :-  endpoint1_constant(C), range_triangle(I), X = C + 1. %endpoint1 gets mapped to 2 for edge 2 - add endpoint arity
isomorph_map(C, 3, C) :-  endpoint1_constant(C), range_triangle(I). %endpoint1 gets mapped to itself for edge 3
isomorph_map(C, 1, C) :-  endpoint2_constant(C), range_triangle(I). %endpoint2 gets mapped to itself for edge 1
isomorph_map(C, 2, X) :-  endpoint2_constant(C), range_triangle(I), X = C + 1. %endpoint2 gets mapped to 3 for edge 2
isomorph_map(C, 3, X) :-  endpoint2_constant(C), range_triangle(I), X = C + 1. %endpoint2 gets mapped to 3 for edge 3
isomorph_map(C, I, X) :- range_triangle(I), range_domain(C), X = C+(7+1)*I, not endpoint1_constant(C), not endpoint2_constant(C).

ijp_isomorph_1_a(TID, VI0) :- indb(a, TID, 1), a(TID, V0), isomorph_map(V0,1,VI0).
ijp_isomorph_1_r(TID, VI0,VI1) :- indb(r, TID, 1), r(TID, V0,V1), isomorph_map(V0,1,VI0), isomorph_map(V1,1,VI1).
ijp_isomorph_1_c(TID, VI0) :- indb(c, TID, 1), c(TID, V0), isomorph_map(V0,1,VI0).
ijp_isomorph_2_a(TID, VI0) :- indb(a, TID, 1), a(TID, V0), isomorph_map(V0,2,VI0).
ijp_isomorph_2_r(TID, VI0,VI1) :- indb(r, TID, 1), r(TID, V0,V1), isomorph_map(V0,2,VI0), isomorph_map(V1,2,VI1).
ijp_isomorph_2_c(TID, VI0) :- indb(c, TID, 1), c(TID, V0), isomorph_map(V0,2,VI0).
ijp_isomorph_3_a(TID, VI0) :- indb(a, TID, 1), a(TID, V0), isomorph_map(V0,3,VI0).
ijp_isomorph_3_r(TID, VI0,VI1) :- indb(r, TID, 1), r(TID, V0,V1), isomorph_map(V0,3,VI0), isomorph_map(V1,3,VI1).
ijp_isomorph_3_c(TID, VI0) :- indb(c, TID, 1), c(TID, V0), isomorph_map(V0,3,VI0).

ijp_isomorph_triangle_a(TID, V0) :- ijp_isomorph_1_a(TID, V0).
ijp_isomorph_triangle_r(TID, V0, V1) :- ijp_isomorph_1_r(TID, V0, V1).
ijp_isomorph_triangle_c(TID, V0) :- ijp_isomorph_1_c(TID, V0).
ijp_isomorph_triangle_a(TID, V0) :- ijp_isomorph_2_a(TID, V0).
ijp_isomorph_triangle_r(TID, V0, V1) :- ijp_isomorph_2_r(TID, V0, V1).
ijp_isomorph_triangle_c(TID, V0) :- ijp_isomorph_2_c(TID, V0).
ijp_isomorph_triangle_a(TID, V0) :- ijp_isomorph_3_a(TID, V0).
ijp_isomorph_triangle_r(TID, V0, V1) :- ijp_isomorph_3_r(TID, V0, V1).
ijp_isomorph_triangle_c(TID, V0) :- ijp_isomorph_3_c(TID, V0).
ijp_triangle_witness(Z, X, Y) :- ijp_isomorph_triangle_a(T1, X), ijp_isomorph_triangle_r(T2, X, Y), ijp_isomorph_triangle_r(T3, Y, Y), ijp_isomorph_triangle_r(T4, Y, Z), ijp_isomorph_triangle_c(T5, Z).
:- number_of_witnesses(K), not  #count{ Z, X, Y : ijp_triangle_witness(Z, X, Y) }= 3*K.
:~ witness(Z, X, Y, T1, T2, T3, T4, T5). [1@1, Z, X, Y]

#show.
#show number_of_witnesses(K) : number_of_witnesses(K).
#show witness(Z, X, Y) : witness(Z, X, Y, T1, T2, T3, T4, T5).
#show res(K) : res(K).
