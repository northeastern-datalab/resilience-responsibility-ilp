r(1,1,1).
r(2,1,2).
r(3,1,3).
r(4,1,4).
r(5,1,5).
r(6,1,6).
r(7,1,7).
r(8,1,8).
r(9,2,1).
r(10,2,2).
r(11,2,3).
r(12,2,4).
r(13,2,5).
r(14,2,6).
r(15,2,7).
r(16,2,8).
r(17,3,1).
r(18,3,2).
r(19,3,3).
r(20,3,4).
r(21,3,5).
r(22,3,6).
r(23,3,7).
r(24,3,8).
r(25,4,1).
r(26,4,2).
r(27,4,3).
r(28,4,4).
r(29,4,5).
r(30,4,6).
r(31,4,7).
r(32,4,8).
r(33,5,1).
r(34,5,2).
r(35,5,3).
r(36,5,4).
r(37,5,5).
r(38,5,6).
r(39,5,7).
r(40,5,8).
r(41,6,1).
r(42,6,2).
r(43,6,3).
r(44,6,4).
r(45,6,5).
r(46,6,6).
r(47,6,7).
r(48,6,8).
r(49,7,1).
r(50,7,2).
r(51,7,3).
r(52,7,4).
r(53,7,5).
r(54,7,6).
r(55,7,7).
r(56,7,8).
r(57,8,1).
r(58,8,2).
r(59,8,3).
r(60,8,4).
r(61,8,5).
r(62,8,6).
r(63,8,7).
r(64,8,8).
c(1,1).
c(2,2).
c(3,3).
c(4,4).
c(5,5).
c(6,6).
c(7,7).
c(8,8).
s(1,1,1).
s(2,1,2).
s(3,1,3).
s(4,1,4).
s(5,1,5).
s(6,1,6).
s(7,1,7).
s(8,1,8).
s(9,2,1).
s(10,2,2).
s(11,2,3).
s(12,2,4).
s(13,2,5).
s(14,2,6).
s(15,2,7).
s(16,2,8).
s(17,3,1).
s(18,3,2).
s(19,3,3).
s(20,3,4).
s(21,3,5).
s(22,3,6).
s(23,3,7).
s(24,3,8).
s(25,4,1).
s(26,4,2).
s(27,4,3).
s(28,4,4).
s(29,4,5).
s(30,4,6).
s(31,4,7).
s(32,4,8).
s(33,5,1).
s(34,5,2).
s(35,5,3).
s(36,5,4).
s(37,5,5).
s(38,5,6).
s(39,5,7).
s(40,5,8).
s(41,6,1).
s(42,6,2).
s(43,6,3).
s(44,6,4).
s(45,6,5).
s(46,6,6).
s(47,6,7).
s(48,6,8).
s(49,7,1).
s(50,7,2).
s(51,7,3).
s(52,7,4).
s(53,7,5).
s(54,7,6).
s(55,7,7).
s(56,7,8).
s(57,8,1).
s(58,8,2).
s(59,8,3).
s(60,8,4).
s(61,8,5).
s(62,8,6).
s(63,8,7).
s(64,8,8).
indb(r, Tid, 1) | indb(r, Tid, 0) :- r(Tid, _, _).
indb(c, Tid, 1) | indb(c, Tid, 0) :- c(Tid, _).
indb(s, Tid, 1) | indb(s, Tid, 0) :- s(Tid, _, _).
witness(Z, X, Y, T1, T2, T3, T4, T5) :- s(T1, X, Y), r(T2, X, Y), r(T3, Y, X), r(T4, Z, Y), c(T5, Z), indb(s, T1, 1), indb(r, T2, 1), indb(r, T3, 1), indb(r, T4, 1), indb(c, T5, 1).

valid_res2(c, 1, 1).
invalid_res2(c, 1, 1).
valid_res3(c, 2, 1).
invalid_res3(c, 2, 1).
valid_res4(c, 1, 1).
invalid_res4(c, 1, 1).
valid_res4(c, 2, 1).
invalid_res4(c, 2, 1).

invalid_res1(r, Tid, 1) | invalid_res1(r, Tid, 0) :- r(Tid, _, _).
invalid_res1(c, Tid, 1) | invalid_res1(c, Tid, 0) :- c(Tid, _).
invalid_res1(s, Tid, 1) | invalid_res1(s, Tid, 0) :- s(Tid, _, _).

invalid_res2(r, Tid, 1) | invalid_res2(r, Tid, 0) :- r(Tid, _, _).
invalid_res2(c, Tid, 1) | invalid_res2(c, Tid, 0) :- c(Tid, _).
invalid_res2(s, Tid, 1) | invalid_res2(s, Tid, 0) :- s(Tid, _, _).

invalid_res3(r, Tid, 1) | invalid_res3(r, Tid, 0) :- r(Tid, _, _).
invalid_res3(c, Tid, 1) | invalid_res3(c, Tid, 0) :- c(Tid, _).
invalid_res3(s, Tid, 1) | invalid_res3(s, Tid, 0) :- s(Tid, _, _).

invalid_res4(r, Tid, 1) | invalid_res4(r, Tid, 0) :- r(Tid, _, _).
invalid_res4(c, Tid, 1) | invalid_res4(c, Tid, 0) :- c(Tid, _).
invalid_res4(s, Tid, 1) | invalid_res4(s, Tid, 0) :- s(Tid, _, _).

valid_res1(r, Tid, 1) | valid_res1(r, Tid, 0) :- r(Tid, _, _).
valid_res1(c, Tid, 1) | valid_res1(c, Tid, 0) :- c(Tid, _).
valid_res1(s, Tid, 1) | valid_res1(s, Tid, 0) :- s(Tid, _, _).

valid_res2(r, Tid, 1) | valid_res2(r, Tid, 0) :- r(Tid, _, _).
valid_res2(c, Tid, 1) | valid_res2(c, Tid, 0) :- c(Tid, _).
valid_res2(s, Tid, 1) | valid_res2(s, Tid, 0) :- s(Tid, _, _).

valid_res3(r, Tid, 1) | valid_res3(r, Tid, 0) :- r(Tid, _, _).
valid_res3(c, Tid, 1) | valid_res3(c, Tid, 0) :- c(Tid, _).
valid_res3(s, Tid, 1) | valid_res3(s, Tid, 0) :- s(Tid, _, _).

valid_res4(r, Tid, 1) | valid_res4(r, Tid, 0) :- r(Tid, _, _).
valid_res4(c, Tid, 1) | valid_res4(c, Tid, 0) :- c(Tid, _).
valid_res4(s, Tid, 1) | valid_res4(s, Tid, 0) :- s(Tid, _, _).


invalid_resilience1 :- witness(Z, X, Y, T1, T2, T3, T4, T5), invalid_res1(s, T1, 0), invalid_res1(r, T2, 0), invalid_res1(r, T3, 0), invalid_res1(r, T4, 0), invalid_res1(c, T5, 0).
invalid_resilience1 :- #count{Table, Tid: invalid_res1(Table, Tid, 1)} >= K, res(K).
invalid_resilience2 :- witness(Z, X, Y, T1, T2, T3, T4, T5), invalid_res2(s, T1, 0), invalid_res2(r, T2, 0), invalid_res2(r, T3, 0), invalid_res2(r, T4, 0), invalid_res2(c, T5, 0).
invalid_resilience2 :- #count{Table, Tid: invalid_res2(Table, Tid, 1)} >= K, res(K).
invalid_resilience3 :- witness(Z, X, Y, T1, T2, T3, T4, T5), invalid_res3(s, T1, 0), invalid_res3(r, T2, 0), invalid_res3(r, T3, 0), invalid_res3(r, T4, 0), invalid_res3(c, T5, 0).
invalid_resilience3 :- #count{Table, Tid: invalid_res3(Table, Tid, 1)} >= K, res(K).
invalid_resilience4 :- witness(Z, X, Y, T1, T2, T3, T4, T5), invalid_res4(s, T1, 0), invalid_res4(r, T2, 0), invalid_res4(r, T3, 0), invalid_res4(r, T4, 0), invalid_res4(c, T5, 0).
invalid_resilience4 :- #count{Table, Tid: invalid_res4(Table, Tid, 1)} >= K+1, res(K).

:- witness(Z, X, Y, T1, T2, T3, T4, T5), valid_res1(s, T1, 0), valid_res1(r, T2, 0), valid_res1(r, T3, 0), valid_res1(r, T4, 0), valid_res1(c, T5, 0).
res(K) :- #count{Table, Tid: valid_res1(Table, Tid, 1)} = K.
:- witness(Z, X, Y, T1, T2, T3, T4, T5), valid_res2(s, T1, 0), valid_res2(r, T2, 0), valid_res2(r, T3, 0), valid_res2(r, T4, 0), valid_res2(c, T5, 0).
:- not #count{Table, Tid: valid_res2(Table, Tid, 1)} = K, res(K).
:- witness(Z, X, Y, T1, T2, T3, T4, T5), valid_res3(s, T1, 0), valid_res3(r, T2, 0), valid_res3(r, T3, 0), valid_res3(r, T4, 0), valid_res3(c, T5, 0).
:- not #count{Table, Tid: valid_res3(Table, Tid, 1)} = K, res(K).
:- witness(Z, X, Y, T1, T2, T3, T4, T5), valid_res4(s, T1, 0), valid_res4(r, T2, 0), valid_res4(r, T3, 0), valid_res4(r, T4, 0), valid_res4(c, T5, 0).
:- not #count{Table, Tid: valid_res4(Table, Tid, 1)} = K+1, res(K).

invalid_res1(r, Tid, 0) :- invalid_resilience1, r(Tid, _, _).
invalid_res1(r, Tid, 1) :- invalid_resilience1, r(Tid, _, _).
invalid_res1(c, Tid, 0) :- invalid_resilience1, c(Tid, _).
invalid_res1(c, Tid, 1) :- invalid_resilience1, c(Tid, _).
invalid_res1(s, Tid, 0) :- invalid_resilience1, s(Tid, _, _).
invalid_res1(s, Tid, 1) :- invalid_resilience1, s(Tid, _, _).

invalid_res2(r, Tid, 0) :- invalid_resilience2, r(Tid, _, _).
invalid_res2(r, Tid, 1) :- invalid_resilience2, r(Tid, _, _).
invalid_res2(c, Tid, 0) :- invalid_resilience2, c(Tid, _).
invalid_res2(c, Tid, 1) :- invalid_resilience2, c(Tid, _).
invalid_res2(s, Tid, 0) :- invalid_resilience2, s(Tid, _, _).
invalid_res2(s, Tid, 1) :- invalid_resilience2, s(Tid, _, _).

invalid_res3(r, Tid, 0) :- invalid_resilience3, r(Tid, _, _).
invalid_res3(r, Tid, 1) :- invalid_resilience3, r(Tid, _, _).
invalid_res3(c, Tid, 0) :- invalid_resilience3, c(Tid, _).
invalid_res3(c, Tid, 1) :- invalid_resilience3, c(Tid, _).
invalid_res3(s, Tid, 0) :- invalid_resilience3, s(Tid, _, _).
invalid_res3(s, Tid, 1) :- invalid_resilience3, s(Tid, _, _).

invalid_res4(r, Tid, 0) :- invalid_resilience4, r(Tid, _, _).
invalid_res4(r, Tid, 1) :- invalid_resilience4, r(Tid, _, _).
invalid_res4(c, Tid, 0) :- invalid_resilience4, c(Tid, _).
invalid_res4(c, Tid, 1) :- invalid_resilience4, c(Tid, _).
invalid_res4(s, Tid, 0) :- invalid_resilience4, s(Tid, _, _).
invalid_res4(s, Tid, 1) :- invalid_resilience4, s(Tid, _, _).

:- not invalid_resilience1.
:- not invalid_resilience2.
:- not invalid_resilience3.
:- not invalid_resilience4.
range_triangle(1..3).range_domain(1..8).
endpoint1_constant(1).
endpoint2_constant(2).
:- witness(Z, X, Y, T1, T2, T3, T4, T5), endpoint1_constant(Z), endpoint1_constant(X), endpoint1_constant(Y).
:- witness(Z, X, Y, T1, T2, T3, T4, T5), endpoint2_constant(Z), endpoint2_constant(X), endpoint2_constant(Y).
:- not #count{ T1, T2, T3, T4, T5: witness(1, X, Y, T1, T2, T3, T4, T5)} = 1.
:- not #count{ T1, T2, T3, T4, T5: witness(2, X, Y, T1, T2, T3, T4, T5)} = 1.

isomorph_map(C, 1, C) :-  endpoint1_constant(C), range_triangle(I). % endpoint1 gets mapped to itself for edge 1
isomorph_map(C, 2, X) :-  endpoint1_constant(C), range_triangle(I), X = C + 1. %endpoint1 gets mapped to 2 for edge 2 - add endpoint arity
isomorph_map(C, 3, C) :-  endpoint1_constant(C), range_triangle(I). %endpoint1 gets mapped to itself for edge 3
isomorph_map(C, 1, C) :-  endpoint2_constant(C), range_triangle(I). %endpoint2 gets mapped to itself for edge 1
isomorph_map(C, 2, X) :-  endpoint2_constant(C), range_triangle(I), X = C + 1. %endpoint2 gets mapped to 3 for edge 2
isomorph_map(C, 3, X) :-  endpoint2_constant(C), range_triangle(I), X = C + 1. %endpoint2 gets mapped to 3 for edge 3
isomorph_map(C, I, X) :- range_triangle(I), range_domain(C), X = C+(8+1)*I, not endpoint1_constant(C), not endpoint2_constant(C).

ijp_isomorph_1_r(TID, VI0,VI1) :- indb(r, TID, 1), r(TID, V0,V1), isomorph_map(V0,1,VI0), isomorph_map(V1,1,VI1).
ijp_isomorph_1_c(TID, VI0) :- indb(c, TID, 1), c(TID, V0), isomorph_map(V0,1,VI0).
ijp_isomorph_1_s(TID, VI0,VI1) :- indb(s, TID, 1), s(TID, V0,V1), isomorph_map(V0,1,VI0), isomorph_map(V1,1,VI1).
ijp_isomorph_2_r(TID, VI0,VI1) :- indb(r, TID, 1), r(TID, V0,V1), isomorph_map(V0,2,VI0), isomorph_map(V1,2,VI1).
ijp_isomorph_2_c(TID, VI0) :- indb(c, TID, 1), c(TID, V0), isomorph_map(V0,2,VI0).
ijp_isomorph_2_s(TID, VI0,VI1) :- indb(s, TID, 1), s(TID, V0,V1), isomorph_map(V0,2,VI0), isomorph_map(V1,2,VI1).
ijp_isomorph_3_r(TID, VI0,VI1) :- indb(r, TID, 1), r(TID, V0,V1), isomorph_map(V0,3,VI0), isomorph_map(V1,3,VI1).
ijp_isomorph_3_c(TID, VI0) :- indb(c, TID, 1), c(TID, V0), isomorph_map(V0,3,VI0).
ijp_isomorph_3_s(TID, VI0,VI1) :- indb(s, TID, 1), s(TID, V0,V1), isomorph_map(V0,3,VI0), isomorph_map(V1,3,VI1).

ijp_isomorph_triangle_r(TID, V0, V1) :- ijp_isomorph_1_r(TID, V0, V1).
ijp_isomorph_triangle_c(TID, V0) :- ijp_isomorph_1_c(TID, V0).
ijp_isomorph_triangle_s(TID, V0, V1) :- ijp_isomorph_1_s(TID, V0, V1).
ijp_isomorph_triangle_r(TID, V0, V1) :- ijp_isomorph_2_r(TID, V0, V1).
ijp_isomorph_triangle_c(TID, V0) :- ijp_isomorph_2_c(TID, V0).
ijp_isomorph_triangle_s(TID, V0, V1) :- ijp_isomorph_2_s(TID, V0, V1).
ijp_isomorph_triangle_r(TID, V0, V1) :- ijp_isomorph_3_r(TID, V0, V1).
ijp_isomorph_triangle_c(TID, V0) :- ijp_isomorph_3_c(TID, V0).
ijp_isomorph_triangle_s(TID, V0, V1) :- ijp_isomorph_3_s(TID, V0, V1).
ijp_triangle_witness(Z, X, Y) :- ijp_isomorph_triangle_s(T1, X, Y), ijp_isomorph_triangle_r(T2, X, Y), ijp_isomorph_triangle_r(T3, Y, X), ijp_isomorph_triangle_r(T4, Z, Y), ijp_isomorph_triangle_c(T5, Z).
number_of_witnesses(K) :- #count{ Z, X, Y, T1, T2, T3, T4, T5 : witness(Z, X, Y, T1, T2, T3, T4, T5) } = K.
:- number_of_witnesses(K), not  #count{ Z, X, Y : ijp_triangle_witness(Z, X, Y) }= 3*K.
:~ witness(Z, X, Y, T1, T2, T3, T4, T5). [1@1, Z, X, Y]

#show.
#show number_of_witnesses(K) : number_of_witnesses(K).
#show witness(Z, X, Y) : witness(Z, X, Y, T1, T2, T3, T4, T5).
#show res(K) : res(K).
